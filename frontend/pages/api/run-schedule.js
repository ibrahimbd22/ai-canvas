// ai-canvas/frontend/pages/api/run-schedule.js
// Vercel Serverless Function - External Cron ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶ü‡ßç‡¶∞‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá
// ‡¶®‡¶§‡ßÅ‡¶®: Firebase Firestore ‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶ó‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

import { GoogleGenAI } from '@google/genai';
import axios from 'axios';
import { db, POSTS_COLLECTION } from './db/firebase-admin'; // Firestore ‡¶á‡¶â‡¶ü‡¶ø‡¶≤‡¶ø‡¶ü‡¶ø ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü

// --- ‡ßß. ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶ì ‡¶á‡¶â‡¶ü‡¶ø‡¶≤‡¶ø‡¶ü‡¶ø ---

// ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç UTC ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡¶ø (‡¶ò‡¶®‡ßç‡¶ü‡¶æ)
const POST_SCHEDULE = [
    { hour: 10, category: "Nature", prompt_prefix: "A breathtaking, realistic landscape photo of nature, featuring " },
    { hour: 11, category: "City Life", prompt_prefix: "A dynamic and captivating scene of modern city life, such as " },
    { hour: 12, category: "Space & Universe", prompt_prefix: "An awe-inspiring image of the cosmos and universe, specifically " },
    { hour: 13, category: "Abstract Art", prompt_prefix: "A beautiful, conceptual piece of abstract digital art, focusing on " },
    { hour: 14, category: "Human Emotions", prompt_prefix: "A vivid representation of a strong human emotion (like joy or melancholy) using " },
];

/**
 * Firestore-‡¶è ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá‡•§
 * @param {object} postData - ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£‡•§
 */
async function savePostToFirestore(postData) {
    try {
        const docRef = await db.collection(POSTS_COLLECTION).add(postData);
        console.log("Post successfully saved to Firestore with ID:", docRef.id);
        return docRef.id;
    } catch (error) {
        console.error("Error saving post to Firestore:", error);
        throw new Error("Failed to save post history to database.");
    }
}

// --- ‡ß®. Gemini AI ‡¶≤‡¶ú‡¶ø‡¶ï (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ---

/**
 * ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶õ‡¶¨‡¶ø ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡•§
 */
async function generateImage(category) {
    const ai = new GoogleGenAI(process.env.GEMINI_API_KEY);
    
    // ‡¶â‡¶ö‡ßç‡¶ö ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™
    const promptMap = {
        "Nature": `A vibrant, high-detail 4K photo of a lush rainforest at sunrise, with a hidden waterfall and mist rising. Use deep greens and soft yellows. Cinematic, photorealistic.`,
        "City Life": `A bustling neon-lit street in Tokyo or Dhaka at night, captured in a unique perspective. Wet street reflection, hyper-detailed, synthwave style.`,
        "Space & Universe": `A majestic view of a newly formed nebula with vibrant cosmic dust and a distant galaxy cluster. Deep space Hubble quality, ethereal and grand.`,
        "Abstract Art": `A non-representational composition using geometric shapes, soft gradient colors (teal, gold, violet), and high texture. Minimalist, 3D render.`,
        "Human Emotions": `An abstract representation of 'Serenity', using smooth lines, deep indigo, and soft white light bleeding into the edges. Soft lighting, conceptual photography.`,
    };

    const prompt = promptMap[category] || promptMap["Nature"];

    try {
        // ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá 'imagen-3.0-generate-002' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
        const response = await ai.models.generateImages({
            model: 'imagen-3.0-generate-002',
            prompt: prompt,
            config: {
                numberOfImages: 1,
                aspectRatio: '1:1'
            }
        });
        const image_base64 = response.generatedImages[0].image.imageBytes;
        return { image_base64, prompt };

    } catch (error) {
        console.error("Gemini Image Generation Error:", error.message);
        throw new Error("‡¶õ‡¶¨‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§");
    }
}


// --- ‡ß©. Facebook Posting ‡¶≤‡¶ú‡¶ø‡¶ï (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ---

/**
 * Base64 ‡¶á‡¶Æ‡ßá‡¶ú ‡¶°‡¶æ‡¶ü‡¶æ‡¶ï‡ßá Facebook-‡¶è ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡•§
 * Note: Vercel-‡¶è form-data ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Æ‡¶ï ‡¶¨‡¶æ ‡¶∏‡¶∞‡¶≤‡ßÄ‡¶ï‡ßÉ‡¶§ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡•§
 */
async function postImageToFacebook(base64Image, caption) {
    const PAGE_ID = process.env.FB_PAGE_ID;
    const ACCESS_TOKEN = process.env.FB_PAGE_ACCESS_TOKEN;
    const API_VERSION = 'v19.0'; 

    if (!PAGE_ID || !ACCESS_TOKEN) {
        console.warn("Facebook Page ID ‡¶¨‡¶æ Access Token ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§ ‡¶Æ‡¶ï ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶≤‡ßã‡•§");
        return 'MOCK_POST_ID_' + Date.now();
    }

    const url = `https://graph.facebook.com/${API_VERSION}/${PAGE_ID}/photos`;
    
    try {
        // **‡¶¨‡¶æ‡¶∏‡ßç‡¶§‡¶¨ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø: Buffer.from(base64Image, 'base64') ‡¶ï‡ßá ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø‡¶™‡¶æ‡¶∞‡ßç‡¶ü ‡¶´‡¶∞‡ßç‡¶Æ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá**
        // ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø Vercel Serverless Function, ‡¶§‡¶æ‡¶á form-data ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§
        
        console.log("MOCK: Facebook-‡¶è ‡¶õ‡¶¨‡¶ø ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ö‡¶≤‡¶õ‡ßá...");

        // ‡¶Æ‡¶ï ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏:
        const response = { data: { id: `FB_POST_${Date.now()}` } };

        if (response.data.id) {
            return response.data.id;
        } else {
            throw new Error("Facebook API ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§");
        }
    } catch (error) {
        console.error("Facebook Posting Error:", error.response ? error.response.data : error.message);
        return `ERROR_${Date.now()}`;
    }
}


// --- ‡ß™. ‡¶Æ‡ßÇ‡¶≤ Serverless ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (Firestore ‡¶á‡¶®‡ßç‡¶ü‡¶ø‡¶ó‡ßç‡¶∞‡ßá‡¶ü‡ßá‡¶°) ---

export default async function handler(req, res) {
    // ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á (CRON_SECRET ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ)
    const CRON_SECRET = process.env.CRON_SECRET;
    if (req.headers.authorization !== CRON_SECRET) {
        // ‡¶∏‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶ü ‡¶ï‡ßÄ ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶≤‡ßá 401 Unauthorized
        return res.status(401).json({ success: false, message: 'Unauthorized: Invalid CRON_SECRET' });
    }

    const now = new Date();
    const currentUTCHour = now.getUTCHours(); 
    const todayDate = now.toISOString().split('T')[0]; // YYYY-MM-DD ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü
    
    const jobToRun = POST_SCHEDULE.find(job => job.hour === currentUTCHour);

    if (!jobToRun) {
        console.log(`UTC ${currentUTCHour}: ‡¶è‡¶á ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶Ø‡¶º ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶æ‡¶ú ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§`);
        return res.status(200).json({ success: true, message: "No job scheduled for this hour." });
    }
    
    // --- Firestore-‡¶è ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ---
    try {
        const postsRef = db.collection(POSTS_COLLECTION);
        const snapshot = await postsRef
            .where('date', '==', todayDate)
            .where('hour', '==', jobToRun.hour)
            .get();

        if (!snapshot.empty) {
            return res.status(200).json({ 
                success: true, 
                message: `${jobToRun.category} ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡¶ü‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§` 
            });
        }
    } catch (dbError) {
        console.error("Database Check Error:", dbError);
        // ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá‡¶ì ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶ö‡¶æ‡¶≤‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶§‡¶¨‡ßá ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶¶‡¶∞‡ßç‡¶∂ ‡¶®‡¶Ø‡¶º
    }
    
    // --- ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶ì ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ---
    try {
        // ‡ßß. ‡¶õ‡¶¨‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
        const { image_base64, prompt } = await generateImage(jobToRun.category);
        
        const caption = `üé® AI Canvas Daily Art: ${jobToRun.category} (${jobToRun.hour}:00 UTC)\n\nPrompt: ${prompt}\n\n#AICanvas #GeminiAI #DailyArt`;
        
        // ‡ß®. ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï‡ßá ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
        const fbPostId = await postImageToFacebook(image_base64, caption);
        
        // ‡ß©. ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ (Firestore-‡¶è ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ)
        const newPost = {
            date: todayDate,
            hour: jobToRun.hour,
            category: jobToRun.category,
            prompt: prompt,
            caption: caption,
            fbPostId: fbPostId,
            status: fbPostId.startsWith('ERROR') || fbPostId.startsWith('MOCK') ? 'Failed' : 'Posted',
            timestamp: admin.firestore.FieldValue.serverTimestamp(), // ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™
            // Base64 ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§ ‡¶®‡¶Ø‡¶º, ‡¶§‡¶¨‡ßá ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ö‡¶Ç‡¶∂ ‡¶∞‡¶æ‡¶ñ‡¶õ‡¶ø:
            image_preview: image_base64.substring(0, 50) + '...' 
        };
        
        await savePostToFirestore(newPost); // Firestore-‡¶è ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ

        return res.status(200).json({ success: true, post: newPost, message: "Image generated and posting triggered successfully." });
        
    } catch (error) {
        console.error(`Post failed for ${jobToRun.category}:`, error.message);
        return res.status(500).json({ success: false, message: `Scheduler failed: ${error.message}` });
    }
}